import logging
from typing import List, Optional, Dict, Any
from datetime import datetime

from app.services.cv_generator import CVGeneratorService, CVGeneratorFactory, CVTemplate, GeneratedCV
from app.config import settings

logger = logging.getLogger(__name__)


class CVService:
    """Service layer for CV operations."""
    
    def __init__(self):
        self.generator = CVGeneratorFactory.create(settings.cv_generator)
    
    async def generate_cvs(self, count: int, custom_templates: Optional[List[CVTemplate]] = None) -> List[GeneratedCV]:
        """Generate multiple CVs."""
        try:
            logger.info(f"Starting CV generation for {count} CVs")
            results = await self.generator.generate_cvs(count, custom_templates)
            logger.info(f"Successfully generated {len(results)} CVs")
            return results
        except Exception as e:
            logger.error(f"Failed to generate CVs: {e}")
            raise
    
    async def generate_cv_with_template(self, template: CVTemplate) -> GeneratedCV:
        """Generate a single CV with a specific template."""
        try:
            logger.info(f"Generating CV with template: {template.role} - {template.level}")
            results = await self.generator.generate_cvs(1, [template])
            return results[0] if results else None
        except Exception as e:
            logger.error(f"Failed to generate CV with template: {e}")
            raise
    
    async def get_available_templates(self) -> List[CVTemplate]:
        """Get all available CV templates."""
        from app.services.cv_generator import CVTemplateRepository
        # For now, return predefined templates to avoid async issues in API
        return CVTemplateRepository.get_predefined_templates()
    
    async def get_random_templates(self, count: int = 5) -> List[CVTemplate]:
        """Get random CV templates generated by LLM."""
        return await self.generator.template_repo.get_templates(count)
    
    def create_custom_template(self, **kwargs) -> CVTemplate:
        """Create a custom CV template."""
        return CVTemplate(**kwargs)
    
    async def get_generation_stats(self) -> Dict[str, Any]:
        """Get statistics about CV generation."""
        # This could be enhanced with database queries for real stats
        templates = await self.get_available_templates()
        return {
            "total_generated": 0,  # Would come from database
            "last_generation": None,  # Would come from database
            "available_templates": len(templates),
            "service_status": "active"
        }


# Global service instance
cv_service = CVService()
